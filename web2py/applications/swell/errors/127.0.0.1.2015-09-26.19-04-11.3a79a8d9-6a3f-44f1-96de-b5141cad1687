(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> append() takes exactly one argument (2 given)"
p3
sS'layer'
p4
S'C:\\Users\\wretz\\Desktop\\Repositories\\HackTx_2015\\trunk\\web2py\\applications\\swell\\controllers/default.py'
p5
sS'code'
p6
S'@auth.requires_login()\ndef index():\n    #Get the ID of the logged in user\n    loggedInUserQuery = (db.auth_user.id == auth.user.id)\n    loggedInUserResults = db(loggedInUserQuery).select()\n    logged_in_user_id = loggedInUserResults[0].id\n    \n    #Use the ID of the logged in user to get a list of devices that the user has authenticated with.\n    devicesList = []\n    credentialsRows = db(db.credentials.account == logged_in_user_id).select(join=db.resourceOwners.on(db.credentials.resourceOwner==db.resourceOwners.id))\n    for row in credentialsRows:\n        devicesList.append(row.resourceOwners.resourceOwnerName, row.resourceOwners.id)\n        \n\n    \n    return dict(message=T(\'Hello World\'), devicesList = devicesList)\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "gluon/restricted.py", line 224, in restricted\n  File "C:\\Users\\wretz\\Desktop\\Repositories\\HackTx_2015\\trunk\\web2py\\applications\\swell\\controllers/default.py", line 68, in <module>\n  File "gluon/globals.py", line 392, in <lambda>\n  File "gluon/tools.py", line 3439, in f\n  File "C:\\Users\\wretz\\Desktop\\Repositories\\HackTx_2015\\trunk\\web2py\\applications\\swell\\controllers/default.py", line 12, in index\n    devicesList.append(row.resourceOwners.resourceOwnerName, row.resourceOwners.id)\nTypeError: append() takes exactly one argument (2 given)\n'
p11
s.